import React, { useEffect, useState } from "react";
import axios from "axios";
import jsPDF from "jspdf";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  CircularProgress,
  Button,
  Typography,
  Box,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from "@mui/material";
import {
  PictureAsPdf as PdfIcon,
  Refresh as RefreshIcon,
  Visibility as ViewIcon
} from "@mui/icons-material";
import "../../styles/AdminReportsPage.css";

// Helper function to format dates without date-fns
const formatDate = (dateString, options = {}) => {
  if (!dateString) return "N/A";
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
    ...options
  });
};

const formatDateTime = (dateString) => {
  if (!dateString) return "N/A";
  const date = new Date(dateString);
  return date.toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

const AdminReportsPage = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedReport, setSelectedReport] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = async () => {
    try {
      setLoading(true);
      const res = await axios.get("http://localhost:8080/api/reports");
      setReports(res.data);
      setError(null);
    } catch (err) {
      setError("Failed to load reports. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const generatePdf = (report) => {
    const doc = new jsPDF();
    
    // Styling
    doc.setFont("helvetica", "bold");
    doc.setFontSize(20);
    doc.setTextColor(33, 150, 243); // Blue color
    doc.text(report.reportTitle, 105, 20, { align: "center" });
    
    // Reset styling for content
    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0); // Black color
    
    // Report details
    doc.text(`Report Period: ${formatDate(report.fromDate)} to ${formatDate(report.toDate)}`, 14, 40);
    doc.text(`Generated on: ${formatDate(new Date())}`, 14, 50);
    
    // Statistics section
    doc.setFontSize(14);
    doc.text("Statistics", 14, 70);
    doc.setFontSize(12);
    doc.text(`✓ Verified Applications: ${report.verifiedCount}`, 20, 85);
    doc.text(`✗ Rejected Applications: ${report.rejectedCount}`, 20, 95);
    
    // Comments section
    doc.setFontSize(14);
    doc.text("Officer Comments", 14, 115);
    doc.setFontSize(12);
    const comments = report.comments || "No additional comments";
    const splitComments = doc.splitTextToSize(comments, 180);
    doc.text(splitComments, 20, 130);
    
    // Footer
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Report ID: ${report.id} • Generated by ${report.adminEmail || "system"}`, 105, 280, { align: "center" });
    
    // Generate filename with current date
    const today = new Date();
    const filenameDate = `${today.getFullYear()}${(today.getMonth()+1).toString().padStart(2, '0')}${today.getDate().toString().padStart(2, '0')}`;
    doc.save(`${report.reportTitle.replace(/\s+/g, '_')}_${filenameDate}.pdf`);
  };

  const handleViewDetails = (report) => {
    setSelectedReport(report);
    setOpenDialog(true);
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">
        <Typography color="error">{error}</Typography>
      </Box>
    );
  }

  return (
    <div className="admin-reports-container">
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
        <Typography variant="h4" component="h1" color="primary">
          Reports Dashboard
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<RefreshIcon />}
          onClick={fetchReports}
        >
          Refresh
        </Button>
      </Box>

      {reports.length === 0 ? (
        <Paper elevation={3} style={{ padding: 20, textAlign: "center" }}>
          <Typography variant="h6">No reports available</Typography>
          <Button variant="outlined" color="primary" onClick={fetchReports} style={{ marginTop: 10 }}>
            Try Again
          </Button>
        </Paper>
      ) : (
        <>
          <TableContainer component={Paper} elevation={3}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Report Title</TableCell>
                  <TableCell>Period</TableCell>
                  <TableCell align="center">Verified</TableCell>
                  <TableCell align="center">Rejected</TableCell>
                  <TableCell>Officer</TableCell>
                  <TableCell align="center">Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {reports.map((report) => (
                  <TableRow key={report.id} hover>
                    <TableCell>{report.reportTitle}</TableCell>
                    <TableCell>
                      {formatDate(report.fromDate, { month: 'short', day: 'numeric' })} - {formatDate(report.toDate)}
                    </TableCell>
                    <TableCell align="center" style={{ color: "#4CAF50" }}>
                      {report.verifiedCount}
                    </TableCell>
                    <TableCell align="center" style={{ color: "#F44336" }}>
                      {report.rejectedCount}
                    </TableCell>
                    <TableCell>
                      {report.officer?.name || "System Generated"}
                    </TableCell>
                    <TableCell align="center">
                      <Tooltip title="View Details">
                        <IconButton onClick={() => handleViewDetails(report)}>
                          <ViewIcon color="info" />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Download PDF">
                        <IconButton onClick={() => generatePdf(report)}>
                          <PdfIcon color="error" />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>

          <Typography variant="caption" display="block" mt={2}>
            Showing {reports.length} report(s)
          </Typography>
        </>
      )}

      {/* Report Details Dialog */}
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="sm" fullWidth>
        <DialogTitle>{selectedReport?.reportTitle}</DialogTitle>
        <DialogContent dividers>
          {selectedReport && (
            <Box>
              <Typography variant="subtitle1" gutterBottom>
                <strong>Period:</strong> {formatDate(selectedReport.fromDate)} - {formatDate(selectedReport.toDate)}
              </Typography>
              <Box display="flex" gap={4} my={2}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Verified
                  </Typography>
                  <Typography variant="h5" color="success.main">
                    {selectedReport.verifiedCount}
                  </Typography>
                </Box>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Rejected
                  </Typography>
                  <Typography variant="h5" color="error.main">
                    {selectedReport.rejectedCount}
                  </Typography>
                </Box>
              </Box>
              <Typography variant="subtitle1" gutterBottom>
                <strong>Comments:</strong>
              </Typography>
              <Typography paragraph>
                {selectedReport.comments || "No additional comments"}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                Generated by: {selectedReport.adminEmail || "System"} • {formatDateTime(selectedReport.createdAt)}
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => generatePdf(selectedReport)} startIcon={<PdfIcon />}>
            Download PDF
          </Button>
          <Button onClick={() => setOpenDialog(false)} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default AdminReportsPage;